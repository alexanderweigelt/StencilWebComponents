// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { GetTodosError, GetTodosResponse, PostTodosData, PostTodosError, PostTodosResponse, GetTodosByIdData, GetTodosByIdError, GetTodosByIdResponse, PutTodosByIdData, PutTodosByIdError, PutTodosByIdResponse, DeleteTodosByIdData, DeleteTodosByIdError, DeleteTodosByIdResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Hole eine Liste aller ToDos
 * Gibt eine Liste von ToDo-Elementen zurück, sortiert nach Datum (aufsteigend).
 */
export const getTodos = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTodosResponse, GetTodosError, ThrowOnError>({
        ...options,
        url: '/todos'
    });
};

/**
 * Erstelle ein neues ToDo
 * Fügt ein neues ToDo-Element zur Liste hinzu.
 */
export const postTodos = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostTodosData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTodosResponse, PostTodosError, ThrowOnError>({
        ...options,
        url: '/todos'
    });
};

/**
 * Hole ein spezifisches ToDo
 * Gibt ein einzelnes ToDo-Element anhand seiner ID zurück.
 */
export const getTodosById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetTodosByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTodosByIdResponse, GetTodosByIdError, ThrowOnError>({
        ...options,
        url: '/todos/{id}'
    });
};

/**
 * Aktualisiere ein ToDo
 * Aktualisiert ein bestehendes ToDo-Element anhand seiner ID.
 */
export const putTodosById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutTodosByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutTodosByIdResponse, PutTodosByIdError, ThrowOnError>({
        ...options,
        url: '/todos/{id}'
    });
};

/**
 * Lösche ein ToDo
 * Entfernt ein ToDo-Element anhand seiner ID.
 */
export const deleteTodosById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteTodosByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteTodosByIdResponse, DeleteTodosByIdError, ThrowOnError>({
        ...options,
        url: '/todos/{id}'
    });
};